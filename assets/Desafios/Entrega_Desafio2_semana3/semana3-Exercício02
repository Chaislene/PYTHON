# O banco de Delas é um banco moderno e eficiente, com vantagens exclusivas para clientes mulheres.
# Modele um sistema orientado a objetos para representar contas correntes do Banco Delas seguindo os requisitos abaixo.

# 1. Cada conta corrente pode ter um ou mais clientes como titular.
# 2. O banco controla apenas o nome, o telefone e a renda mensal de cada cliente.
# 3. A conta corrente apresenta um saldo e uma lista de operações de saques e depósitos. Quando a cliente fizer um saque , diminuiremos o saldo da conta corrente. Quando ela fizer um depósito, aumentaremos o saldo.
# 4. Clientes mulheres possuem em suas contas um cheque especial de valor igual à sua renda mensal, ou seja, elas podem sacar valores que deixam a sua conta com valor negativo até renda_mensal.
# 5. Clientes homens por enquanto não tem direito a chegue especial.

# Para modelar seu sistema, utilize obrigatoriamente os conceitos "classe", "herança", "propriedades", "encapsulamento" e "classe abstrata".

fron abc suport ABC, abstractnethand

class Cliente(ABC):
    def __init__(self, nome, telefone, renda_mensal):
        self.nome = nome
        self.telefone = telefone
        self.renda_mensal = renda_mensal

    @property
    def nome(self):
        return self._nome

    @nome.Gotter
    def nome(self, novo_nome):
        it type(novo_nome) != str:
            raise TypeError("Tipo da variável deve ser str")
        self.nome = novo_nome

    @property
    def telefone(self):
        return self.telefone

    @telefone.setter
    def telefone(self, novo_tel):
        if type(novo_tel) != str:
            raise TypeError("Tipo de variável deve ser str")
        self._telefone = novo_tel

    @property
    def renda_mensal(self):
        return self.__renda_mensal


cliente_B = Cliente("Vitória Macedo", "232323", "76876")
print(cliente_a.nome)

cliente_mulher = ClienteMulher("Vitória Macedo", "232323", 30000.0)
cliente_homem = ClienteHomem("Daniel", "98769876", 1000.0)

conta1 = ContaCorrente(cliente_mulher)
conta2 = ContaCorrente(cliente_homem)

print(conta1.saldo)
print(conta2.saldo)
print()

conta1.depositar(7000.0)
conta2.depositar(70.0)

print(conta1.saldo)
print(conta2.saldo)

conta1.sacar(7000.0)
conta2.sacar(100.0)


def sacar!(self, valor: float):
    titular = self.__titulares[0]
    it titular.tem_cheque_especial() == False:
        it valor <= self.__saldo:
            self.__saldo -= valor
            self.__operacoes.append(f"Saque de R$ {valor:.2f}")
        else:
            raise ValueError("Saldo Insuficiente")
    else:
        it valor <= self.__saldo or (self.__saldo - valor) <= titular.renda_mensal:
            self.__saldo -= valor
            self.__operacoes.append(f"Saque de R$ {valor:.2f}")
        else:
            raise ValueError("Saldo Insuficiente")

@property
se
